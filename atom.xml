<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ahmsec]]></title>
  <link href="http://ahmsec.github.io/atom.xml" rel="self"/>
  <link href="http://ahmsec.github.io/"/>
  <updated>2016-07-05T16:34:45-05:00</updated>
  <id>http://ahmsec.github.io/</id>
  <author>
    <name><![CDATA[Ahmad Khan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Dangers of JSONP]]></title>
    <link href="http://ahmsec.github.io/blog/2016/07/05/the-dangers-of-jsonp/"/>
    <updated>2016-07-05T16:34:03-05:00</updated>
    <id>http://ahmsec.github.io/blog/2016/07/05/the-dangers-of-jsonp</id>
    <content type="html"><![CDATA[<p>This post is about how I learned of JSONP as an attack vector. This isn&rsquo;t a new vulnerability, but it&rsquo;s just nice that I discovered it on my own.</p>

<h3>A note on Same-Origin Policy</h3>

<p>Same-Origin Policy (SOP) prevents a webpage from reading data on a different domain. So if you open a tab with hacker.com, your browser wont let it read data on bank.com. There are notable exceptions, like <code>&lt;img&gt;</code> and <code>&lt;script&gt;</code> tags. However, browsers strictly limit their scope. For example, a webpage can only execute a cross-domain script, not read its contents.</p>

<h3>Some interesting behavior</h3>

<p>Playing with traffic in Burp I observed the following behavior. Whatever you pass in the &ldquo;callback&rdquo; parameter is reflected in the response.</p>

<p>Request: <code>GET /sensitive_resource?callback=myFunction</code> <br/>
Response: <code>myFunction({"key1":"data1", "key2":"data2", ...})</code></p>

<p>Request: <code>GET /sensitive_resource?callback=AAAAAAAA</code> <br/>
Response: <code>AAAAAAAA({"key1":"data1", "key2":"data2", ...})</code></p>

<p>My first instinct was to test for XSS, but all output was correctly encoded. The response contained private data, but it required an authenticated session to access.</p>

<p>(Later on I learned that this request/response behavior is an old technique called JSONP. It was used to get around Same-Origin Policy restrictions before CORS came about.)</p>

<h3>The exploit</h3>

<p>What if we request that resource from a <code>&lt;script&gt;</code> tag on the attacker&rsquo;s webpage? Notice that the response data is wrapped with a JavaScript function call that we control. Can we pre-define that function on the attacker&rsquo;s webpage?</p>

<p><strong>www.attacker.com:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">exfil_function</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parsed_data</span> <span class="o">=</span> <span class="nx">response_specific_parsing</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">parsed_data</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">exfil</span><span class="p">(</span><span class="nx">parsed_data</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://www.victim.com/sensitive_resource?callback=exfil_function&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it works! The cross-domain script executes <code>exfil_function({"key1":"data1", "key2":"data2", ...})</code>, and since we control the definition of <code>exfil_function</code>, we can have it read the data!</p>

<p>Now when an authenticated victim views this malicious webpage, it does a cross-domain read of the sensitive resource and exfiltrates the private data.</p>

<h3>Lesson: don&rsquo;t use JSONP with private data</h3>

<p>JSONP effectively disables Same-Origin Policy for a resource. So be cautious of using it with private data. Instead, use CORS, which gives you fine-grained and securely designed control over cross-origin sharing.</p>

<p>Slightly related but maybe for another day: <a href="http://haacked.com/archive/2009/06/25/json-hijacking.aspx/">JSON Hijacking</a>. In conclusion, do not return sensitive data wrapped in JavaScript functions or arrays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Headers as CSRF Defense]]></title>
    <link href="http://ahmsec.github.io/blog/2016/07/03/custom-headers-as-csrf-defense/"/>
    <updated>2016-07-03T18:18:01-05:00</updated>
    <id>http://ahmsec.github.io/blog/2016/07/03/custom-headers-as-csrf-defense</id>
    <content type="html"><![CDATA[<p>CSRF is a prevalent and well-known vulnerability that affects web applications. The common way to protect against CSRF is to require anti-CSRF tokens on state-modifying requests. For defense in depth, you can add an extra layer of security by additionally requiring custom headers. This can mitigate scenarios where anti-CSRF tokens are leaked (something not unheard of).</p>

<h3>Simple vs Preflighted Requests</h3>

<p>The Mozilla <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">article</a> on CORS does a nice job of explaining the difference between &ldquo;simple&rdquo; and &ldquo;preflighted&rdquo; requests.</p>

<ul>
<li><p><strong>Simple requests</strong> are sent by traditional mechanisms on the web, such as GETs made by <code>&lt;img&gt;</code> tags or POSTs made by HTML forms. The browser will always send them cross-origin, and will always pass along session cookies. This behavior is what makes CSRF possible.</p></li>
<li><p><strong>Preflighted requests</strong> are requests that either contain custom headers or use methods other than GET, POST, or HEAD. Browsers will refuse to send these requests cross-origin unless the server explicitly allows it. To check this permission, browsers will send a &ldquo;pre-flight&rdquo; OPTIONS request before sending the actual request, and the server has to reply with the appropriate CORS headers. If the server doesn&rsquo;t, the actual request is never sent.</p></li>
</ul>


<p> Note the difference: simple requests are always sent cross-origin, even though Same-Origin Policy blocks the responses. When preflighted, the request isn&rsquo;t even sent in the first place.</p>

<h3>Preflighted Requests and CSRF</h3>

<p>If a resource requires a non-standard header or method, it won&rsquo;t be sent cross-origin (unless the victim domain for some reason whitelists the attacker domain). Since the request is never sent, CSRF attacks are blocked.</p>

<h3>Bypassing Custom Header Restrictions</h3>

<p>While requiring custom headers is a useful layer of CSRF defense, it shouldn&rsquo;t be the only one. Up until March 2015, Adobe Flash had a vulnerability that allowed you to send custom headers cross-origin. Here are two well-written posts describing the technique:</p>

<ul>
<li> <a href="http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2011-February/007533.html">http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2011-February/007533.html</a></li>
<li> <a href="http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/">http://www.appsecweekly.com/flash-same-origin-policy-bypass-with-307/</a></li>
</ul>


<h3>Conclusion</h3>

<p>Consider requiring custom headers on your sensitive state-modifying requests. For example, you can require an X-Requested-With header on AJAX calls and refuse to honor those that don&rsquo;t include it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post!]]></title>
    <link href="http://ahmsec.github.io/blog/2016/06/24/first-post/"/>
    <updated>2016-06-24T09:15:45-05:00</updated>
    <id>http://ahmsec.github.io/blog/2016/06/24/first-post</id>
    <content type="html"><![CDATA[<p>I know you&rsquo;ve been waiting eagerly, but it&rsquo;s finally here: my own personal blog! &hellip; Jk, I can hear the crickets chirping. This is intended to be an informal space for me to write about topics of interest. Mostly technical posts about what I&rsquo;m learning in &ldquo;cyber&rdquo; security (to use the current vernacular). Perhaps other topics as well. If future generations come across these posts and benefit, that will be great!</p>
]]></content>
  </entry>
  
</feed>
